
Colabora√ß√£o: Deploy no Render para a Se√ß√£o 23
0 votos a favor
Juvenal ¬∑ Aula 331 ¬∑ 1 m√™s atr√°s
ESTE √â UM TUTORIAL COMPLEMENTAR PARA DEPLOY DO PROJETO NO RENDER COMO SUBSTITUTO DO HEROKU

ESTAREI COLOCANDO ABAIXO OS VIDEOS DO CURSO QUE VOC√ä DEVE VER



Assista na Se√ß√£o 23 os videos:

323. Instala√ß√£o do PostgreSQL

324. Profile dev

325. Obtendo script SQL a partir do PostgreSQL local



----- CRIANDO CONTA NO RENDER -----



site: render.com



1 - Fa√ßa o cadastro no Render com sua conta do GitHub

2 - Voc√™ ser√° redirecionado para o GitHub e autorizar o Render, se todos os seu reposit√≥rios forem p√∫blicos marque como ALL

2 - No Render no canto superior direito clique em + New

3 - Clique em PostgreSQL

4 - Em Name de um nome para a inst√¢ncia ex: render_postgresql

5 - Em Database de um nome para database ex: springboot_course

6 - Em User de um nome ao usu√°rio administrador: ex: admin

7 - Em PostgreSQL Version selecione a vers√£o que voc√™ usa localmente

8 - Em Instance Type selecione Free

9 - Clique em Create Database



Agora clique em Dashboard, e veja a lista abaixo deve constar na lista a sua inst√¢ncia de postgreSQL criada no meu caso render_postgresql, clique nela;

Na nova tela copie e cole os seguintes itens em um documento de texto vazio:



Hostname

Port

Database

Username

Password

External Database URL



----- CONFIGURANDO O PGADMIN COM O RENDER -----



Assista na Se√ß√£o 23 os videos:

326. Executando script SQL no servidor remoto



Aten√ß√£o os itens abaixo s√£o complementares ao video, substituindo o Heroku pelo Render



Fa√ßa as seguintes substitui√ß√µes:



Na gia General em name coloque Render

Na gia Connection em Host name/addres cole a url copiad acima de External Database URL e fa√ßa as seguintes modifica√ß√µes:

postgresql://<APAGUE TUDO QUE ESTIVER ENTRE A BARRA E O ARROBA>@dpg-cq1ijf88fa8c73f778f0-a.oregon-postgres.render.com<AP√ìS O com APAGE TUDO>

        O endere√ßo firac√° algo como: postgresql://@dpgskfskasd-a.oregon-postgres.render.com

Em Maintenance database cole o nome Database que voc√™ colocou no Render acima

Em Username cole o username que voc√™ colocou no Render acima

Em Password cole o password que voc√™ copiou do Render, e selecione Save password para salvar a senha

Na gia Advanced em DB restriction cole novamente o nome do Database



----- AJUSTANDO O PROJETO NO STS -----



Assista na Se√ß√£o 23 os videos:

328. Executando script SQL no servidor remoto



Nesta etapa voc√™ ir√° substituir o que est√° no arquivo application-prod.properties

Cole as informa√ß√µes abaixo no arquivo:



spring.datasource.url=${DATABASE_URL}

spring.datasource.username=${DATABASE_USERNAME}

spring.datasource.password=${DATABASE_PASSWORD}



spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

spring.jpa.hibernate.ddl-auto=update

spring.jpa.show-sql=true

spring.jpa.properties.hibernate.format_sql=false

spring.datasource.driver-class-name=org.postgresql.Driver



Ainda no projeto crie um file na raiz do projeto com o nome: Dockerfile

Copie e cole o c√≥digo abaixo e salve o arquivo (obs: estou supondo que voc√™ est√° usando o java 17):



FROM ubuntu:latest AS build



RUN apt-get update && \

    apt-get install -y openjdk-17-jdk maven && \

    apt-get clean



WORKDIR /app



COPY . .



RUN mvn clean package -DskipTests



FROM openjdk:17-jdk-slim



EXPOSE 8080



COPY --from=build /app/target/course-0.0.1-SNAPSHOT.jar app.jar



ENTRYPOINT [ "java", "-jar", "app.jar" ]



SALVE TODOS OS ARQUIVOS E N√ÉO ESQUE√áA DE FAZER COMMIT PARA O SEU REPOSIT√ìRIO NO GITHUB



----- CRIANDO WEB SERVICE -----



Volte ao Reder e em + New no cando superior direito clique em Web Service



1 - Marque Build and deploy from a Git repository e clique em next

2 - Selecione o reposit√≥rio do projeto

3 - Em Name de um nome ao web service

4 - Em Language selecione Docker

5 - Em Branch veja se esta como main

6 - Em Instance Type selecione Free

7 - Clique em Deploy Web Service no final da p√°gina



Agora no menu esquerdo v√° em Environment



crie os seguintes itens





Key: DATABASE_URL

Value:jdbc:postgresql://COLE_AQUI_SEU_HOSTNAME_COPIADO_ANTERIORMENTE:5432/COLE_AQUI_O_NOME_DO_DB_COPIADO_ANTERIORMENTE

Key: DATABASE_USERNAME Value: cole aqui o username copiado anteriormente

Key: DATABASE_PASSWORD Value: cole aqui o password copiado anteriormente



Feito isso ainda no menu esquerdo v√° em Events, na tela que aparece v√° √† direita e acima da p√°gina, clique em Manual Deploy e depois em Deploy latest commit

Quando aparecer a mensagem:



==> Your service is live üéâ

==> Detected a new open port HTTP:8080



Seu sistema estara funcionando:

Volte agora para cima da p√°gina a esquerda voc√™ notar√° que abaixo onde sinaliza o seu reposit√≥rio no GitHub existe um link.

Copie este link, abra o Postman e altere as url de requisi√ß√£o:



De: http://localhost:8080/users

Para: SEU_LINK/users



Obs: todos os http://localhost:8080 devem ser substituido pelo seu link